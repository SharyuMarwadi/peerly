// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import db "joshsoftware/peerly/db"
import mock "github.com/stretchr/testify/mock"

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// CleanBlacklistedTokens provides a mock function with given fields:
func (_m *Storer) CleanBlacklistedTokens() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBadge provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateBadge(_a0 context.Context, _a1 db.Badge) (db.Badge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Badge
	if rf, ok := ret.Get(0).(func(context.Context, db.Badge) db.Badge); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Badge)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Badge) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewUser provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateNewUser(_a0 context.Context, _a1 db.User) (db.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, db.User) db.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateOrganization(_a0 context.Context, _a1 db.Organization) (db.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(context.Context, db.Organization) db.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Organization) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecognition provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateRecognition(_a0 context.Context, _a1 db.Recognition) (db.Recognition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Recognition
	if rf, ok := ret.Get(0).(func(context.Context, db.Recognition) db.Recognition); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Recognition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Recognition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecognitionHi5 provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) CreateRecognitionHi5(_a0 context.Context, _a1 db.RecognitionHi5, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.RecognitionHi5, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRecognitionModeration provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) CreateRecognitionModeration(_a0 context.Context, _a1 int64, _a2 db.RecognitionModeration) (db.RecognitionModeration, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 db.RecognitionModeration
	if rf, ok := ret.Get(0).(func(context.Context, int64, db.RecognitionModeration) db.RecognitionModeration); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(db.RecognitionModeration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, db.RecognitionModeration) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportedRecognition provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) CreateReportedRecognition(_a0 context.Context, _a1 int64, _a2 db.ReportedRecognition) (db.ReportedRecognition, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 db.ReportedRecognition
	if rf, ok := ret.Get(0).(func(context.Context, int64, db.ReportedRecognition) db.ReportedRecognition); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(db.ReportedRecognition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, db.ReportedRecognition) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserBlacklistedToken provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateUserBlacklistedToken(_a0 context.Context, _a1 db.UserBlacklistedToken) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UserBlacklistedToken) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBadge provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) DeleteBadge(_a0 context.Context, _a1 int, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrganization provides a mock function with given fields: _a0, _a1
func (_m *Storer) DeleteOrganization(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganization provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetOrganization(_a0 context.Context, _a1 int) (db.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(context.Context, int) db.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationByDomainName provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetOrganizationByDomainName(_a0 context.Context, _a1 string) (db.Organization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Organization); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByID provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetRoleByID(_a0 context.Context, _a1 int) (db.Role, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Role
	if rf, ok := ret.Get(0).(func(context.Context, int) db.Role); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetRoleByName(_a0 context.Context, _a1 string) (db.Role, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Role); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetUser(_a0 context.Context, _a1 int) (db.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, int) db.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetUserByEmail(_a0 context.Context, _a1 string) (db.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetUserByID(_a0 context.Context, _a1 int) (db.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, int) db.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByOrganization provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) GetUserByOrganization(_a0 context.Context, _a1 int, _a2 int) (db.User, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, int, int) db.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBadges provides a mock function with given fields: _a0, _a1
func (_m *Storer) ListBadges(_a0 context.Context, _a1 int) ([]db.Badge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []db.Badge
	if rf, ok := ret.Get(0).(func(context.Context, int) []db.Badge); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Badge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizations provides a mock function with given fields: _a0
func (_m *Storer) ListOrganizations(_a0 context.Context) ([]db.Organization, error) {
	ret := _m.Called(_a0)

	var r0 []db.Organization
	if rf, ok := ret.Get(0).(func(context.Context) []db.Organization); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecognitions provides a mock function with given fields: _a0
func (_m *Storer) ListRecognitions(_a0 context.Context) ([]db.Recognition, error) {
	ret := _m.Called(_a0)

	var r0 []db.Recognition
	if rf, ok := ret.Get(0).(func(context.Context) []db.Recognition); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Recognition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecognitionsWithFilter provides a mock function with given fields: _a0, _a1
func (_m *Storer) ListRecognitionsWithFilter(_a0 context.Context, _a1 map[string]int) ([]db.Recognition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []db.Recognition
	if rf, ok := ret.Get(0).(func(context.Context, map[string]int) []db.Recognition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Recognition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: _a0
func (_m *Storer) ListUsers(_a0 context.Context) ([]db.User, error) {
	ret := _m.Called(_a0)

	var r0 []db.User
	if rf, ok := ret.Get(0).(func(context.Context) []db.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetHi5QuotaBalanceJob provides a mock function with given fields:
func (_m *Storer) ResetHi5QuotaBalanceJob() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShowBadge provides a mock function with given fields: _a0, _a1
func (_m *Storer) ShowBadge(_a0 context.Context, _a1 db.Badge) (db.Badge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Badge
	if rf, ok := ret.Get(0).(func(context.Context, db.Badge) db.Badge); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Badge)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Badge) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowRecognition provides a mock function with given fields: _a0, _a1
func (_m *Storer) ShowRecognition(_a0 context.Context, _a1 int) (db.Recognition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Recognition
	if rf, ok := ret.Get(0).(func(context.Context, int) db.Recognition); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Recognition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBadge provides a mock function with given fields: _a0, _a1
func (_m *Storer) UpdateBadge(_a0 context.Context, _a1 db.Badge) (db.Badge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 db.Badge
	if rf, ok := ret.Get(0).(func(context.Context, db.Badge) db.Badge); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(db.Badge)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Badge) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHi5QuotaRenewalFrequencyOfUsers provides a mock function with given fields: _a0
func (_m *Storer) UpdateHi5QuotaRenewalFrequencyOfUsers(_a0 db.Organization) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.Organization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) UpdateOrganization(_a0 context.Context, _a1 db.Organization, _a2 int) (db.Organization, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 db.Organization
	if rf, ok := ret.Get(0).(func(context.Context, db.Organization, int) db.Organization); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Organization, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) UpdateUser(_a0 context.Context, _a1 db.User, _a2 int) (db.User, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, db.User, int) db.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.User, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
